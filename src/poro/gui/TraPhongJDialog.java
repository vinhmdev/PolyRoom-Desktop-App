/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poro.gui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import poro.module.CalendarManager;
import poro.module.db.DatabaseManager;
import poro.module.db.data.MuonPhong;
import poro.module.db.data.Phong;
import poro.module.db.data.SinhVien;
import poro.module.db.data.TaiKhoan;
import poro.module.db.data.ThongTinMuonPhong;

/**
 *
 * @author vinh
 */
public class TraPhongJDialog extends javax.swing.JDialog {

    /**
     * Creates new form TraPhongJDialog
     */
    public TraPhongJDialog(java.awt.Frame parent, boolean modal, ArrayList<ThongTinMuonPhong> ttmps) {
        super(parent, modal);
        initComponents();

        this.ttmps = ttmps;
        loadingTable();
    }

    ArrayList<ThongTinMuonPhong> ttmps;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblList = new javax.swing.JTable();
        btnTraPhong = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Trả phòng");
        setResizable(false);

        tblList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã mượn", "Tên phòng", "Người mượn", "Email", "Chức vụ", "Lý do", "TG bắt đầu", "TG trả dự kiến"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblList);

        btnTraPhong.setText("Trả phòng");
        btnTraPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraPhongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 982, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTraPhong)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnTraPhong)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTraPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraPhongActionPerformed
        traPhong();
    }//GEN-LAST:event_btnTraPhongActionPerformed

    private void tblListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListMouseClicked
        if (evt.getClickCount() != 2) {
            return;
        }
        traPhong();
    }//GEN-LAST:event_tblListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTraPhong;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblList;
    // End of variables declaration//GEN-END:variables

    private void loadingTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblList.getModel();
        dtm.setRowCount(0);
        if (ttmps == null || ttmps.isEmpty()) {
            return;
        }
        ttmps.forEach(tt -> {
            Phong p = tt.getPhong();
            MuonPhong mp = tt.getMuonPhong();
            SinhVien sv = tt.getSinhVien();
            TaiKhoan tk = tt.getTaiKhoan();
            dtm.addRow(new Object[]{
                mp.getIdMuonPhong(),
                p.getTenPhong(),
                sv == null ? tk.getTen() + " (" + tk.getIdTaiKhoan() + ")" : sv.getTenSV() + " ( " + sv.getIdSV() + ")",
                sv == null ? tk.getEmail() : sv.getEmail(),
                sv == null ? tk.isPhanQuyen() ? "Quản lý" : "Giảng viên" : "Sinh viên",
                mp.getLyDo(),
                CalendarManager.getString(mp.getTgMuon(), CalendarManager.DATE_HOUR_FULL_FORMAT),
                CalendarManager.getString(mp.getTgTra(), CalendarManager.DATE_HOUR_FULL_FORMAT)
            });
        });
    }

    private void traPhong() {
        DefaultTableModel dtm = (DefaultTableModel) tblList.getModel();
        int rowSeleted = tblList.getSelectedRow();
        if (rowSeleted == -1 || rowSeleted >= dtm.getRowCount()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn phòng muốn trả");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn muốn trả phòng sớm ?", "Xác nhận trả phòng", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION != confirm) {
            return;
        }

        int idMuon = (Integer) dtm.getValueAt(rowSeleted, 0);
        MuonPhong mp = new MuonPhong();
        mp.setIdMuonPhong(idMuon);
        ArrayList<MuonPhong> mps = DatabaseManager.executeQuery(mp, MuonPhong.EXECUTE_SELECT_BY_ID);
        if (mps == null || mps.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phiếu mượn không tồn tại, vui lòng kiểm tra lại");
            return;
        }
        mp = mps.get(0);

        if (CalendarManager.getNow().before(mp.getTgMuon())) {
            mp.setTgTraThucTe(mp.getTgMuon());
        } else {
            mp.setTgTraThucTe(CalendarManager.getNow());
        }

        int ok = DatabaseManager.executeUpdate(mp, MuonPhong.EXECUTE_UPDATE_BY_ID);
        if (ok >= 0) {
            JOptionPane.showMessageDialog(this, "Trả phòng thành công");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Trả phòng thất bại");
        }
    }

}
