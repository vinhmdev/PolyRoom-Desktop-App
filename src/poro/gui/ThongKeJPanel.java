/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poro.gui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import poro.module.db.DatabaseManager;
import poro.module.db.DbExecuteQuery;

/**
 *
 * @author ASUS
 */
public class ThongKeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ThongKeJPanel
     */
    public ThongKeJPanel() {
        initComponents();

        loadingCbo(cboNguoiMuon);
        loadingCbo(cboPhong);
        ok = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cboNguoiMuon = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNguoiMuon = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        cboPhong = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPhong = new javax.swing.JTable();

        cboNguoiMuon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tháng 12/ 2020" }));
        cboNguoiMuon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboNguoiMuonItemStateChanged(evt);
            }
        });

        tblNguoiMuon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã người mượn", "Tên người mượn", "Chức vụ", "Lần mượn", "Lần mượn hộ", "Số lần bị hủy", "Tổng thời gian"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblNguoiMuon);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboNguoiMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboNguoiMuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Người mượn", jPanel1);

        cboPhong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tháng 12/ 2020" }));
        cboPhong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboPhongItemStateChanged(evt);
            }
        });

        tblPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Tên phòng", "Lầu", "Mã phòng", "Số lượt mượn", "Số lượt sinh viên", "Số lượt hủy", "Tổng thời gian"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPhong);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cboPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Phòng", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboNguoiMuonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboNguoiMuonItemStateChanged
        if (!ok) {
            return;
        }
        loadingThongKeNguoiMuon();
    }//GEN-LAST:event_cboNguoiMuonItemStateChanged

    private void cboPhongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboPhongItemStateChanged
        if (!ok) {
            return;
        }
        loadingThongKePhong();
    }//GEN-LAST:event_cboPhongItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboNguoiMuon;
    private javax.swing.JComboBox<String> cboPhong;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblNguoiMuon;
    private javax.swing.JTable tblPhong;
    // End of variables declaration//GEN-END:variables

    boolean ok = false;

    void setTab(int i) {
        tabs.setSelectedIndex(i);
    }

    public void loading() {
        loadingThongKeNguoiMuon();
        loadingThongKePhong();
    }

    final String FORM = "Tháng:-%2d/%2d";

    private void loadingCbo(JComboBox cbo) {
        cbo.removeAllItems();
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH) + 1;
        for (int i = year - 10; i < year + 10; i++) {
            for (int j = 1; j <= 12; j++) {
                cbo.addItem(coverString(i, j));
            }
        }
        cbo.setSelectedItem(coverString(year, month));
    }

    //form: "... MM/yyyy";
    //return i[0] = year, i[1] = month
    private int[] coverTimes(String s) {
        String date = s.substring(s.lastIndexOf(" ") + 1);
        int result[] = new int[2];
        result[1] = Integer.parseInt(date.split("/")[0]);
        result[0] = Integer.parseInt(date.split("/")[1]);
        return result;
    }

    private String coverString(int year, int month) {
        return String.format(FORM, month, year).replaceAll(" ", "0").replaceAll("-", " ");
    }

    private void loadingThongKeNguoiMuon() {
        String date = (String) cboNguoiMuon.getSelectedItem();
        ThongKeNguoiMuon ttnm = new ThongKeNguoiMuon();
        ttnm.nam = coverTimes(date)[0];
        ttnm.thang = coverTimes(date)[1];
        ArrayList<ThongKeNguoiMuon> tknms = DatabaseManager.executeQuery(ttnm, -1);

        DefaultTableModel dtm = (DefaultTableModel) tblNguoiMuon.getModel();
        dtm.setRowCount(0);

        if (tknms == null) {
            return;
        }

        tknms.forEach(tk -> {
            dtm.addRow(new Object[]{
                tk.idTaiKhoan,
                tk.ten,
                tk.chucVu ? "Quản lý" : "Giảng viên",
                tk.luotDat,
                tk.muonHo,
                tk.luotHuy,
                (String.format("%.2f giờ", (double) tk.thoiGian / 1000 / 60 / 60))
            });
        });
    }

    private void loadingThongKePhong() {
        String date = (String) cboPhong.getSelectedItem();
        ThongKePhong tkp = new ThongKePhong();
        tkp.nam = coverTimes(date)[0];
        tkp.thang = coverTimes(date)[1];
        ArrayList<ThongKePhong> tkps = DatabaseManager.executeQuery(tkp, -1);

        DefaultTableModel dtm = (DefaultTableModel) tblPhong.getModel();
        dtm.setRowCount(0);

        if (tkps == null) {
            return;
        }

        tkps.forEach(p -> {
            dtm.addRow(new Object[]{
                p.tenPhong,
                p.soTang,
                p.idPhong,
                p.luotMuon,
                p.luotSv,
                p.luotHuy,
                (String.format("%.2f giờ", (double) p.thoiGian / 1000 / 60 / 60))
            });
        });
    }

    private class ThongKeNguoiMuon implements DbExecuteQuery {

        String idTaiKhoan;
        String ten;
        boolean chucVu;
        int luotDat;
        int muonHo;
        int luotHuy;
        long thoiGian;

        int nam;
        int thang;

        @Override
        public ThongKeNguoiMuon coverResultSet(ResultSet rs, int type) throws SQLException {
            ThongKeNguoiMuon tk = new ThongKeNguoiMuon();
            tk.idTaiKhoan = rs.getString("id_tai_khoan");
            tk.ten = rs.getString("ten");
            tk.chucVu = rs.getBoolean("is_phan_quyen");
            tk.luotDat = rs.getInt("luot_dat");
            tk.muonHo = rs.getInt("muon_ho");
            tk.luotHuy = rs.getInt("bi_huy");
            tk.thoiGian = rs.getLong("tong_thoi_gian");
            return tk;
        }

        @Override
        public String getExecuteSQL(int type) {
            return "SELECT "
                    + "    [tai_khoan].[id_tai_khoan], "
                    + "    [tai_khoan].[ten], "
                    + "    [tai_khoan].[is_phan_quyen], "
                    + "    COUNT([tai_khoan].[id_tai_khoan]) as luot_dat, "
                    + "    SUM(IIF(id_sinh_vien IS NOT NULL, 1, 0)) as muon_ho, "
                    + "    SUM(IIF([tg_muon] = [tg_tra_thuc_te], 1, 0)) as bi_huy, "
                    + "    SUM(DATEDIFF(MILLISECOND, [tg_muon], [tg_tra_thuc_te])) as tong_thoi_gian "
                    + "FROM [tai_khoan] "
                    + "    LEFT JOIN [muon_phong] ON [tai_khoan].[id_tai_khoan] LIKE [muon_phong].[id_tai_khoan] "
                    + "    LEFT JOIN [thong_tin_sinh_vien] ON [thong_tin_sinh_vien].[id_muon_phong] = [muon_phong].[id_muon_phong] "
                    + "WHERE YEAR([tg_muon]) = ? AND MONTH([tg_muon]) = ? "
                    + "GROUP BY [tai_khoan].[id_tai_khoan], [tai_khoan].[ten], [is_phan_quyen] "
                    + "ORDER BY [tong_thoi_gian] DESC;";
        }

        @Override
        public Object[] getExecuteData(int type) {
            return new Object[]{nam, thang};
        }

    }

    private class ThongKePhong implements DbExecuteQuery {

        String tenPhong;
        int soTang;
        int idPhong;
        int luotMuon;
        int luotSv;
        int luotHuy;
        long thoiGian;

        int nam;
        int thang;

        @Override
        public ThongKePhong coverResultSet(ResultSet rs, int type) throws SQLException {
            ThongKePhong tk = new ThongKePhong();
            tk.tenPhong = rs.getString("ten_phong");
            tk.soTang = rs.getInt("so_tang");
            tk.idPhong = rs.getInt("id_phong");
            tk.luotMuon = rs.getInt("luot_muon");
            tk.luotHuy = rs.getInt("bi_huy");
            tk.thoiGian = rs.getLong("tong_thoi_gian");
            return tk;
        }

        @Override
        public String getExecuteSQL(int type) {
            return "SELECT "
                    + "    [ten_phong], "
                    + "    [phong].[so_tang], "
                    + "    [phong].[id_phong], "
                    + "    SUM(IIF([muon_phong].[id_muon_phong] IS NOT NULL, 1, 0)) AS luot_muon, "
                    + "    SUM(IIF([tg_muon] = [tg_tra_thuc_te], 1, 0)) AS bi_huy, "
                    + "    SUM(DATEDIFF(MILLISECOND, [tg_muon], [tg_tra_thuc_te])) AS tong_thoi_gian "
                    + "FROM [phong] "
                    + "    LEFT JOIN [muon_phong] ON [phong].so_tang = [muon_phong].[so_tang] AND [phong].[id_phong] = [muon_phong].[id_phong] "
                    + "    LEFT JOIN [thong_tin_sinh_vien] ON [thong_tin_sinh_vien].[id_muon_phong] = [muon_phong].[id_muon_phong] "
                    + "WHERE YEAR([tg_muon]) = ? AND MONTH([tg_muon]) = ? "
                    + "GROUP BY [ten_phong], [phong].[so_tang], [phong].[id_phong] "
                    + "ORDER BY [tong_thoi_gian] DESC";
        }

        @Override
        public Object[] getExecuteData(int type) {
            return new Object[]{nam, thang};
        }

    }
}
