/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poro.gui;

import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import poro.gui.exception.ToViewException;
import poro.module.CalendarManager;
import poro.module.Session;
import poro.module.db.DatabaseManager;
import poro.module.db.DatabaseRefresh;
import poro.module.db.data.Phong;
import poro.module.db.data.ThongTinMuonPhong;

/**
 *
 * @author ASUS
 */
public class NMXemPhongJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NMXemPhongJPanel
     */
    public NMXemPhongJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "serial" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPhong = new javax.swing.JTable();
        txtTimStart = new javax.swing.JTextField();
        btnTimPhong = new javax.swing.JButton();
        btnTraPhong = new javax.swing.JButton();
        btnMuonPhong = new javax.swing.JButton();
        txtTimEnd = new javax.swing.JTextField();

        tblPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã lầu", "Mã phòng", "Tên phòng", "Cho mượn", "Đang trống", "Lượt đặt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPhong);

        txtTimStart.setEditable(false);
        txtTimStart.setBackground(new java.awt.Color(255, 255, 255));
        txtTimStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTimStartMouseClicked(evt);
            }
        });

        btnTimPhong.setText("Tìm phòng trống");
        btnTimPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimPhongActionPerformed(evt);
            }
        });

        btnTraPhong.setText("Trả phòng");
        btnTraPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraPhongActionPerformed(evt);
            }
        });

        btnMuonPhong.setText("Mượn phòng");
        btnMuonPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMuonPhongActionPerformed(evt);
            }
        });

        txtTimEnd.setEditable(false);
        txtTimEnd.setBackground(new java.awt.Color(255, 255, 255));
        txtTimEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTimEndMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtTimStart, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtTimEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTimPhong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addComponent(btnTraPhong)
                        .addGap(18, 18, 18)
                        .addComponent(btnMuonPhong))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnMuonPhong, btnTraPhong});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTraPhong)
                    .addComponent(btnMuonPhong)
                    .addComponent(txtTimStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimPhong)
                    .addComponent(txtTimEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loading() {
        loadTblPhong();
        loadPhongDangMuon();
    }
    
    private void btnMuonPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMuonPhongActionPerformed
        MuonPhongJDialog m = new MuonPhongJDialog((JFrame) this.getRootPane().getParent(), true);
        int selected = tblPhong.getSelectedRow();
        
        if (selected == -1 || selected >= tblPhong.getRowCount()) {
            JOptionPane.showMessageDialog(this, "Chưa chọn phòng muốn mượn");
            return;
        }
        
        DefaultTableModel dtm = (DefaultTableModel) tblPhong.getModel();
        
        if (dtm.getValueAt(selected, 3).equals("-")) {
            JOptionPane.showMessageDialog(this, "Phòng không được phép mượn");
            return;
        }
        
        int soTang = (Integer) dtm.getValueAt(selected, 0);
        int idPhong = (Integer) dtm.getValueAt(selected, 1);
        m.loading(soTang, idPhong);
        m.setVisible(true);
        loading();
    }//GEN-LAST:event_btnMuonPhongActionPerformed

    private void btnTraPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraPhongActionPerformed
        showDangMuon();
        loading();
    }//GEN-LAST:event_btnTraPhongActionPerformed

    private void btnTimPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimPhongActionPerformed
        DatabaseRefresh.refresh();
        String sbatDau = txtTimStart.getText();
        String sketThuc = txtTimEnd.getText();
        Date batDau, ketThuc;

        try {
            if (sbatDau.isEmpty()) {
                throw new ToViewException("Chưa chọn thời gian mượn");
            }

            batDau = CalendarManager.getDateByString(sbatDau, CalendarManager.DATE_HOUR_FULL_FORMAT);

            if (batDau.before(CalendarManager.addTimes(CalendarManager.getNow(), -15L * 60 * 1000))) {
                throw new ToViewException("Lỗi thời gian bắt đầu trễ hơn 15 phút so với hiện tại");
            }

            if (sketThuc.isEmpty()) {
                throw new ToViewException("Chưa chọn thời gian trả phòng");
            }

            ketThuc = CalendarManager.getDateByString(sketThuc, CalendarManager.DATE_HOUR_FULL_FORMAT);

            if (batDau.after(ketThuc)) {
                throw new ToViewException("Lỗi thời gian kết thúc trước thời gian mượn");
            }
        } catch (ToViewException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return;
        }

        loading();
        ArrayList<ThongTinMuonPhong> ttmpss;
        ThongTinMuonPhong ttmp = new ThongTinMuonPhong();
        ttmp.setTgBatDauF(CalendarManager.getDateByString(txtTimStart.getText(), CalendarManager.DATE_HOUR_FULL_FORMAT));
        ttmp.setTgKetThucF(CalendarManager.getDateByString(txtTimEnd.getText(), CalendarManager.DATE_HOUR_FULL_FORMAT));

        ttmpss = DatabaseManager.executeQuery(ttmp, ThongTinMuonPhong.EXECUTE_SELECT_TIM_PHONG);
        if (ttmpss == null || ttmpss.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không có phòng trống trong thời gian này!");
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel) tblPhong.getModel();
        ttmpss.forEach(tt -> {
            for (int i = 0; i < dtm.getRowCount(); i++) {
                boolean isLau = tt.getPhong().getIdSoTang() == (Integer) dtm.getValueAt(i, 0);
                boolean isPhong = tt.getPhong().getIdPhong() == (Integer) dtm.getValueAt(i, 1);
                if (isLau && isPhong) {
                    tblPhong.addRowSelectionInterval(i, i);
                }
            }
        });
    }//GEN-LAST:event_btnTimPhongActionPerformed

    private void txtTimStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimStartMouseClicked
        setGioBatDau(txtTimStart);
    }//GEN-LAST:event_txtTimStartMouseClicked

    private void txtTimEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimEndMouseClicked
        setGioKetThuc(txtTimStart, txtTimEnd);
    }//GEN-LAST:event_txtTimEndMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMuonPhong;
    private javax.swing.JButton btnTimPhong;
    private javax.swing.JButton btnTraPhong;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPhong;
    private javax.swing.JTextField txtTimEnd;
    private javax.swing.JTextField txtTimStart;
    // End of variables declaration//GEN-END:variables

    private void loadTblPhong() {
        DefaultTableModel dtm = (DefaultTableModel) tblPhong.getModel();
        dtm.setRowCount(0);
        ArrayList<Phong> dsPhong = DatabaseManager.executeQuery(new Phong(), Phong.EXECUTE_SELECT_ALL);
        dsPhong.forEach(phong -> {
            dtm.addRow(new Object[]{phong.getIdSoTang(), phong.getIdPhong(), phong.getTenPhong(), phong.isChoMuon() ? "Có" : "-", phong.isDangTrong() ? "Có" : "-", phong.getLuotDat()});
        });
    }

    private ArrayList<ThongTinMuonPhong> ttPhongDangMuons = new ArrayList<>();

    private void loadPhongDangMuon() {
        DatabaseRefresh.refresh();
        if (!Session.isLogin()) {
            btnTraPhong.setEnabled(false);
            return;
        }
        ThongTinMuonPhong ttmp = new ThongTinMuonPhong();
        ttmp.setIdTaiKhoanMuon(Session.USER.getIdTaiKhoan());
        ttPhongDangMuons = DatabaseManager.executeQuery(ttmp, ThongTinMuonPhong.EXECUTE_SELECT_BY_ID_TAI_KHOAN);

        if (ttPhongDangMuons == null || ttPhongDangMuons.isEmpty()) {
            btnTraPhong.setEnabled(false);
        } else {
            btnTraPhong.setEnabled(true);
        }
    }

    private void showDangMuon() {
        if (ttPhongDangMuons == null || ttPhongDangMuons.isEmpty()) {
            btnTraPhong.setEnabled(false);
            return;
        } else {
            btnTraPhong.setEnabled(true);
        }
        TraPhongJDialog traPhongJDialog = new TraPhongJDialog((JFrame) this.getRootPane().getParent(), true, ttPhongDangMuons);
        traPhongJDialog.setVisible(true);
    }

    private void setGioBatDau(JTextField txtBatDau) {
        ChonNgayGioJDialog cngjd = new ChonNgayGioJDialog((JFrame) this.getRootPane().getParent(), true);

        Date dateOrigin = CalendarManager.getNow();
        if (!txtBatDau.getText().isEmpty()) {
            dateOrigin = CalendarManager.getDateByString(txtBatDau.getText(), CalendarManager.DATE_HOUR_FULL_FORMAT);
        }
        cngjd.setDateOrigin(dateOrigin);
        cngjd.setVisible(true);
        txtBatDau.setText(cngjd.getResult());
    }

    private void setGioKetThuc(JTextField txtBatDau, JTextField txtKetThuc) {
        ChonNgayGioJDialog cngjd = new ChonNgayGioJDialog((JFrame) this.getRootPane().getParent(), true);

        Date dateOrigin = CalendarManager.getNow();

        if (!txtKetThuc.getText().isEmpty()) {
            dateOrigin = CalendarManager.getDateByString(txtKetThuc.getText(), CalendarManager.DATE_HOUR_FULL_FORMAT);
        } else {
            if (!txtBatDau.getText().isEmpty()) {
                Date first = CalendarManager.getDateByString(txtBatDau.getText(), CalendarManager.DATE_HOUR_FULL_FORMAT);
                dateOrigin = CalendarManager.addTimes(first, 1000L * 60 * 60 * 2);
            }
        }

        cngjd.setDateOrigin(dateOrigin);
        cngjd.setVisible(true);
        txtKetThuc.setText(cngjd.getResult());
    }

}
